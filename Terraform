Terrforms
	Complete Stack Deployment of "web service", "App service", "RDS"and "ELB'S"
	Deployment of "centralized login system" using terraform ELK, logstach, elastic, Kibana
	Centralized Monitoring
	Complete Demployment of DynamoDB.
		Creating tables using terraform
		learn accratly estimate RCUS AND WCUS
	Complete Deployiment of GCP webapp using Loadbalancer,cloudsql

	AWS:
  		> Deploy database Cluster.
    	{Primary and Replica, Aurora MySql engine,
     	Backup_retention and backup_window as input, DB subnet group and group association}

	GCP:
  		>

	Azure:
  		> Deploying VM's and maintaining Azure Load Balancing.
    	{5-tuple hash: Source IP, Source Port, Destination IP(Cloud Service VIP), Destination port(Public Port), Protocol}.

	Git-hub:
  		> Code for the course : https://github.com/cloudopsacademy/Terraformcourse

	Terraform:
  		> Credentials https://www.terraform.io/docs/providers/aws/index.html
  		> There are four types of passing AWS Terraform Credentials
    		1. Creating IAM user and Password through provider.tf
    		2. Creating IAM user and password through environment variables
    		3. Attach admin roles to Instance.
    		4. Storing it under ~/.aws/


				root@ip-172-31-82-156:~# cat provider.tf


resource "aws_instance" "firstdemo" {
        ami             = "ami-922914f7"
        instance_type   = "t2.micro"

        tags {
                Name = "demoinstance"
        }
}



==============================================================================
These are the four ways to Password Credentials:
1) Creating IAM user and password through provider.tf
{
Below is a sample provider.tf file
NOTE : You need Provider.tf to replace access_key and secret_key with generated values

provider "aws" {
	access_key = "fjksguyftfdhgFDFADYYT%7"
	secret_key = "JFSTDSVJ465dghfgfsj"
	region     = "us-east-1"
}
==============================================================================
2) Creating IAM user and password through Environment variables
FOLLOW THREE STEPS:
-> export AWS_ACCESS_KEY_ID="AGHKJHLKJHLH23"
-> export AWS_SECRET_ACCESS_KEY="AGHKJHLKJHLH23"
-> env | grep -i aws
-> terraform plan
-> terraform apply
==============================================================================
3) Attach Admin roles to the user
4) Storing it under ~/.aws/
================================================================================
